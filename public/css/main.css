body{
    background-color: rgb(150, 150, 150);
}

/* 
Standard settings for all the headers.
*/
.header {
    background-color: rgb(34, 34, 34);
    border: 1px black solid;
    color: white;
    font-size: 0.7em;
    height: 20px;
    text-align: center;
}

/*
----------------------------------------------------------
The code editor
reagent function::          code-editor
----------------------------------------------------------
*/

/*
  The div that holds the source editor elements.
*/
.editor {
    height: 400px;
    margin: 10px;
    width: 100%;
}

/* The header for the source editor */
.source-editor-header {
    height: 25px;
    padding-left: 5px;
    padding-top: 4px;
    text-align: left;
    vertical-align: middle;
    width:100%;
}

/* Holds the line numbers for the source editor. */
.text-editor-line-nos {
    background-color: rgb(18, 18, 19);
    border-right: 0px;
    color:rgb(150, 150, 150);
    float: left;
    font-size: 14px;
    height: 400px;
    margin: 0 auto;
    overflow: hidden;
    resize: none;
    text-align: center;
    width: 10%;
}

/* The source editor that holds the code. */
.text-editor {
    background-color: rgb(29, 29, 29);
    border-left: 0px;
    color: rgb(97, 192, 255);
    float: left;
    font-size: 14px;
    height: 100%;
    margin: 0 auto;
    resize: none;
    width:90%;
}

textarea:focus { 
    outline: none !important;
    border-color: black;
}

/* Shows the parse errors. */
.parse-errors {
    background-color: rgb(29, 29, 29);
    color: rgb(209, 9, 9);
    height: 400px;
    padding: 10px;
    width: 100%;
}

/*
----------------------------------------------------------
The parsed code control
reagent function::          code
----------------------------------------------------------
*/

/* The column that holds all the breakpoint indicators.*/
.breakpoint {
    cursor: pointer;
    width: 25px;
    text-align: center;
    text-shadow: 0 0 2px #000;
}

/* The circle on the left of the parsed code control, clickable to set / disable breakpoint */
.breakpoint-indicator {
    background-color: rgb(233, 53, 53);
    border-left: 1px solid black;
    border-right: 1px solid black;
    border-bottom: 1px solid black;
    font-size: 0.8em;
    height: 20px;
    padding-left: 10px;
}

/* The table that holds the code instructions and arguments.*/
.code { 
    border-bottom: 1px solid rgb(46, 46, 46);
    table-layout: fixed;
    text-align: left;
    width: 100%;
}

/* The container for the parsed code table */
.code-container {
    border: 1px rgb(51, 51, 51) solid;
    height: 400px;
    overflow-x: visible;
    overflow-y: auto;
    width: 100%;
}

/* The >> eip indicator.*/
.code-eip {
    width: 25px;
}

/* Table row that holds a single parsed line of code. */
.code-line {
    max-height: 20px;
}

/* For styling the current line of code the eip is on in the parsed code control. */
.current-line {
    background-color: goldenrod;
}

/* For styling the instruction part of a line of code. */
.instruction {
    color: darkblue;
    font-weight: bold;
    margin-left: 8px;
    margin-top: 0px;
    margin-bottom: 0px;
    text-align: left;
    width: 50px;
}

/* Styling the line number column. */
.line-numbers {
    background-color: grey;
    border-right: 2px solid black;
    border-left: 2px solid black;
    color: white;
    text-align: center;
    width: 45px;
}

/* Holds the parsed code. */
.parsed-code-container {
    margin-top: 10px;
    height: 100%;
    overflow-y: none;
    width:  100%;
}

/* The header for the parsed code (has bin on left and clear button on right) */
.parsed-code-header {
    height: 25px;
    text-align: left;
    vertical-align: middle;
    width: 100%;
}

/* Styles a register in a line of code */
.register {
    font-weight: bold;
    text-align: left;
    min-width: 30px;
}

/* Styles a value in a line of code */
.value {
    border-right: 1px solid black dashed;
    color: blueviolet;
    font-weight: normal;
    text-align: left;
    min-width: 30px;
}

/*
----------------------------------------------------------
The buttons for play / pausing / stopping code flow.
The instructions / second selector.

reagent function::          execution-controls

----------------------------------------------------------
*/

/* Outer div for the code control buttons */
.execution-controls {
    margin: 10px;
    text-align:  left;
}

/* The parse button */
.parse-btn {
    margin-right: 10px;
    width: 150px;
}

/* The textbox where you can enter the instructions per msec */
.instr-per-sec {
    margin-left: 10px;
    text-align: right;
    vertical-align: middle;
    width: 60px;
}

/* The next instruction button that increases the eip. */
.next-instruction {
    color: black;
    margin-left: 10px;
}

.next-instruction[disabled] {
    background-color: darkgray;
    border: 1px solid grey;
}

/* The play / pause button */
.play-pause {
    color: black;
}

.play-pause[disabled] {
    background-color: darkgray;
    border: 1px solid grey;
}

/* The label for displaying the speed (msecs / instruction) description. */
.speed-label {
    margin-left: 10px;
    vertical-align: middle;
}

/* The stop / reset button */
.stop-button {
    color: black;
    margin-left: 10px;
}

.stop-button[disabled] {
    background-color: darkgray;
    border: 1px solid grey;
}

/* Shows error if invalid speed is entered for msecs / instruction */
.speed-value-error {
    background-color: red;
    border-radius: 5px;
    color: black;
    margin-left: 5px;
    padding: 5px;
}

/*
----------------------------------------------------------
Running data section.

reagent function::          memory, eip

----------------------------------------------------------
*/

/* EIP container, holds the EIP label and the actual EIP */
.eip-container {
    float: left;
    height: 20px;
    margin: 0;
    text-align: left;
    width: 100%;
}

/* Displays the current EIP */
.eip {
    background-color: white;
    border-right: 1px black solid;
    border-top: 1px black solid;
    border-bottom: 1px black solid;
    color: black;
    font-size: 0.7em;
    height: 20px;
    text-align: center;
    vertical-align: middle;
    width: 125px;
}

/* The EIP Header */
.eip-header {
    font-size: 0.7em;
    height: 20px;
    text-align: center;
    vertical-align: middle;
    width: 100px;
}


/*
----------------------------------------------------------

 Internal registers.

 ----------------------------------------------------------
*/

/* Holds the internal registers, eip stack and rp stack and the header. */
.internal-registers-container {
    border: 1px black solid;
    height: 100%;
    width: 250px;
}

/* Holds the internal registers, eip stack and rp stack. */
.internal-registers-inner-container {
    height: calc(100% - 20px);
    overflow-x: hidden;
    overflow-y: scroll;
}

/* Internal registers header. */
.internal-registers-header {
    font-size: 0.7em;
    text-align: center;
    width: 100%;
}

/* Holds both the internal register stacks*/
.internal-registers-stacks-container {
    height: calc(100% - 60px);
    width: 100%;
}

/* Holds the internal registers, cmp, err and par*/
.internal-registers-list {
    background-color: grey;
    height: 60px;
    width: 100%;
}

/* Holds an internal register name, e.g. par, cmp err */
.internal-register-name {
    background-color: grey;
    border-bottom: 1px solid black;
    border-left: 1px solid black;
    font-size: 0.7em;
    height: 20px;
    text-align: center;
    width: 50%;
}

/* Holds an internal register value. */
.internal-register-value {
    background-color: white;
    border-bottom: 1px solid black;
    border-right: 1px solid black;
    font-size: 0.7em;
    height: 20px;
    text-align: center;
    width: 50%;
}

/* Holds the eip stack container (including header) */
.eip-stack-container {
    float: left;
    height: 100%;
    width: 50%;
}

/* Holds the rp stack container (including header) */
.rp-stack-container {
    float: right;
    height: 100%;
    width: 50%;
}

/* Internal register stack value, used in both eip stack and rp stack. */
.eip-stack-value {
    background-color: white;
    border-bottom: 1px solid black;
    border-right: 1px solid black;
    font-size: 0.7em;
    height: 20px;
    text-align: center;
    width: 100%;
}

/*
----------------------------------------------------------

Registers list

----------------------------------------------------------
*/

/* Holds the registers, including the header. */
.registers-container {
    background-color: orange;
    height: 100%;
    text-align: left;
    width: 500px;
}

/* The registers header. */
.registers-header {
    font-size: 0.7em;
    padding-left: 10px;
    text-align: center;
    vertical-align: middle;
    width: 500px;
}

/* Holds the registers list. Scroll bar is in this control so it doesn't add scrollbar to header as well. */
.registers-list {
    background-color: gray;
    border: 1px solid black;
    height: calc(100% - 20px);
    overflow-x: hidden;
    overflow-y: scroll;
    width: 500px;
}

/* Register Name*/
.register-name {
    background-color: grey;
    border-bottom: 1px solid black;
    border-left: 1px solid black;
    font-size: 0.7em;
    height: 20px;
    margin-left: 10px;
    text-align: center;
    width: 105px;
}

/* Register Value*/
.register-value {
    background-color: white;
    border-bottom: 1px solid black;
    border-right: 1px solid black;
    font-size: 0.7em;
    height: 20px;
    text-align: left;
    width: 380px;
}

/* the last updated register is highlighted yellow. */
.register-updated {
    background-color: yellow;
}

/* Holds the registers, internal registers, stack and symbol table */
.grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    grid-auto-rows: minmax(225px, auto);
    grid-gap: 0px;
    margin: 12px;
    height: 380px;
    width: 100%;
}

/*
----------------------------------------------------------

Stack

reagent method: stack
----------------------------------------------------------
*/

/* Holds the stack, including the header */
.stack-container {
    height: 100%;
    text-align: left;
    width: 350px;
}

/* Stack header */
.stack-header {
    font-size: 0.7em;
    height: 20px;
    padding-left: 10px;
    text-align: center;
    vertical-align: middle;
    width: 100%;
}

/* List of all the stacl values */
.stack-list {
    background-color: gray;
    border: 1px solid black;
    height: calc(100% - 20px);
    overflow-x: hidden;
    overflow-y: scroll;
    width: 100%;
}

/* A single row / value in the stack */
.stack-value {
    background-color: white;
    border-bottom: 1px solid black;
    border-right: 1px solid black;
    font-size: 0.7em;
    height: 20px;
    margin-left: 10px;
    text-align: center;
    width: 100%;
}

/*
----------------------------------------------------------

Symbol Table

reagent method: symbol-table
----------------------------------------------------------
*/

/* Holds the symbol table including the header */
.symbol-table-container {
    height: 100%;
    text-align: left;
    width: 200px;
}

/* Symbol table header */
.symbol-table-header {
    font-size: 0.7em;
    height: 20px;
    padding-left: 10px;
    text-align: center;
    vertical-align: middle;
    width: 200px;
}

/* Holds the symbol table, (not including header) */
.symbol-table {
    border: 1px solid black;
    height: calc(100% - 20px);
    overflow-x: hidden;
    overflow-y: scroll;
    width: 100%;
}

/* A name in the symbol table (left column entry) */
.symbol-name {
    background-color: gray;
    border-bottom: 1px solid black;
    font-size: 0.7em;
    height: 20px;    
    text-align: center;
    width: 50%;
}

/* A value in the symbol table (right column entry) */
.symbol-value {
    background-color: white;
    border-bottom: 1px solid black;
    font-size: 0.7em;
    height: 20px;
    text-align: center;
    width: 50%;
}

/*
----------------------------------------------------------

Output

reagent method: output
----------------------------------------------------------
*/

/* Output header. */
.std-out-header {
    background-color: rgb(34, 34, 34);
    color: white;
    font-size: 0.7em;
    height: 25px;
    text-align: left;
    padding-top: 3px;
    width: 100%;
}

/* Holds the output, including the header */
.std-out-container {
    margin-top: 10px;
    margin-right: 10px;
    text-align: left;
    width: 100%;
}

/* Holds the output, not including the header */
.std-out {
    background-color: rgb(46,43,43);
    color: greenyellow;
    height: 400px;
    padding: 10px;
    overflow-x: auto;
    overflow-y: auto;
    resize: none;
    width: 100%;
}